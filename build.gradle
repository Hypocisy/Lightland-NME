buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${mod_version}"
group = "com.kyogi.${mod_id}"
archivesBaseName = "${mod_id}"

if (lljij.toBoolean()) jarJar.enable()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    //mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.19.4'
    mappings channel: 'official', version: "${minecraft_version}"
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "${mod_authors}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "${mod_authors}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : "${mod_id}.mixins.json"
        ])
    }
}

java {
    withSourcesJar()
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

if (lljij.toBoolean()) {

    reobf {
        jarJar {}
    }

    tasks.jarJar.finalizedBy('reobfJarJar')

    tasks.jarJar.configure {
        archiveClassifier.set('')
    }

    jar {
        archiveClassifier.set('slim')
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("io.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    if (rootMod.toBoolean()) {
        implementation(jarJar("io.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
            transitive = false
            jarJar.ranged(it, "[${mixin_extras_version},)")
        }
    } else {
        implementation("io.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")
    }
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}


repositories {
    flatDir {
        dirs 'libs'
    }
    maven { url 'https://jitpack.io' }
//    maven {
//        // Location of the maven for vazkii's mods
//        name 'blamejared'
//        url 'https://maven.blamejared.com'
//    }
//    maven {
//        // Location of the maven for mixed mappings, Registrate, and Flywheel
//        name 'tterrag maven'
//        url 'https://maven.tterrag.com/'
//    }
//    maven {
//        url 'https://www.cursemaven.com'
//        content {
//            includeGroup "curse.maven"
//        }
//    }
//    maven {
//        url = "https://maven.theillusivec4.top/"
//    }
    mavenLocal()
}

//dependencies {
//
//    implementation fg.deobf("dev.xkmc.l2library:l2library:${l2library_version}-slim")
//    implementation fg.deobf("dev.xkmc.l2serial:l2serial:1.2.0")
//    runtimeOnly fg.deobf("dev.xkmc.l2modularblock:l2modularblock:1.1.0")
//    implementation fg.deobf("dev.xkmc.l2tabs:l2tabs:0.1.5")
//    implementation fg.deobf("dev.xkmc.l2screentracker:l2screentracker:0.1.3")
//
//    implementation fg.deobf(jarJar("dev.xkmc.l2itemselector:l2itemselector:0.1.7")) {
//        transitive = false
//        jarJar.ranged(it, "[0.1.7,)")
//    }
//
//    implementation fg.deobf(jarJar("dev.xkmc.l2damagetracker:l2damagetracker:0.1.6")) {
//        transitive = false
//        jarJar.ranged(it, "[0.1.6,)")
//    }
//
//    runtimeOnly fg.deobf("dev.xkmc.l2backpack:l2backpack:2.4.12-slim")
//    implementation fg.deobf('dev.xkmc.l2complements:l2complements:2.4.19-slim')
//    implementation fg.deobf("dev.xkmc.l2hostility:l2hostility:2.4.11-pre1-slim")
//
//    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
//    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
//
//    runtimeOnly fg.deobf("dev.xkmc.l2artifacts:l2artifacts:2.4.8-slim")
//    runtimeOnly fg.deobf("dev.xkmc.l2archery:l2archery:2.4.7")
//    runtimeOnly fg.deobf("dev.xkmc.l2weaponry:l2weaponry:2.4.18")
//
//    implementation fg.deobf('zip.local.blazegear:blazegear:1.3.6')
//
//    runtimeOnly fg.deobf("curse.maven:jade-324717:4654448")
//    runtimeOnly fg.deobf("curse.maven:attributefix-280510:4588114")
//    runtimeOnly fg.deobf("curse.maven:bookshelf-228525:4581675")
//    runtimeOnly fg.deobf("curse.maven:enchantment-descriptions-250419:4587429")
//
//    //runtimeOnly fg.deobf('curse.maven:appleskin-248787:4440123')
//
//    implementation fg.deobf("curse.maven:create-enchantment-industry-688768:4764843")
//    implementation fg.deobf("curse.maven:create-328085:4762216")
//    implementation fg.deobf("curse.maven:the-twilight-forest-227639:4635921")
//
//    runtimeOnly fg.deobf("curse.maven:caelus-308989:4581481")
//    runtimeOnly fg.deobf("curse.maven:elytra-slot-317716:4598379")
//
//    runtimeOnly fg.deobf("curse.maven:patchouli-306770:4636277")
//
//    //implementation fg.deobf('curse.maven:ic2-classic-242942:4441313')
//
//}
